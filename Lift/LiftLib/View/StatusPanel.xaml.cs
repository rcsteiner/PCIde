using System.Text;
using System.Windows.Controls;

namespace Lift.View
{
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    ///  Interaction logic for StatusPanel.xaml
    /// </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public partial class StatusPanel : UserControl
    {
        private Direction _curDir;

        public bool IsElevator { get; set; }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        ///  Default Constructor:
        /// </summary>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public StatusPanel()
        {
            InitializeComponent();
        }


        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        ///  Method: Set the Direction
        /// </summary>
        /// <param name="dir"> The dir.</param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void SetDirectionOn(Direction dir)
        {
            if (IsElevator && dir != _curDir)
            {
                xFloorIndicator.SetDirectionOff(_curDir);
            }
            xFloorIndicator.SetDirectionOn(dir);
            _curDir = dir;
        }

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        ///  Method: Set the Direction Off, used when not elevator
        /// </summary>
        /// <param name="dir"> The dir.</param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void SetDirectionOff(Direction dir)
        {
            xFloorIndicator.SetDirectionOff(dir);
            _curDir = Direction.STOPPED;
        }

        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        ///// <summary>
        /////  Method: Set the Elevator Floor
        ///// </summary>
        ///// <param name="floor"> The floor.</param>
        //////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        //public void SetElevatorFloor(int floor)
        //{
        //    xFloorNumber.Content = (floor+1).ToString();
        //}

        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        ///  Method: Set the Elevator Stops
        /// </summary>
        /// <param name="queue"> The queue.</param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        public void SetElevatorStops(bool[] stops)
        {
            xFloorNumber.Content = World.ArrayToString(stops);
        }
    }
}


<Application x:Class      ="Ide.App"
             xmlns        ="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x      ="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:views  ="clr-namespace:Views"
             xmlns:xcad   ="http://schemas.xceed.com/wpf/xaml/avalondock"
             xmlns:system ="clr-namespace:System;assembly=mscorlib"
             xmlns:zCore  ="clr-namespace:ZCore;assembly=Support"
             xmlns:ide="clr-namespace:Ide"
              DispatcherUnhandledException="AppDispatcherUnhandledException"
             Startup      ="AppStartup" >
    <Application.Resources>

        <ide:DebugDummyConverter x:Key="DebugDummyConverter" />

        <!--Colors and gradients-->
        <LinearGradientBrush x:Key="TitleBackground" EndPoint="1,0.5" StartPoint="0,0.5">
            <GradientStop Color="#FF219AB8" Offset="0" />
            <GradientStop Color="#FFCDFFFF" Offset="1" />
        </LinearGradientBrush>

        <SolidColorBrush x:Key="MenuBackground"   Color="#FFD6DBE9"/>
        <SolidColorBrush x:Key="ButtonBackground" Color="#FFCFD6E5"/>

        <system:Boolean x:Key="FalseValue">False</system:Boolean>
        <system:Boolean x:Key="TrueValue">True</system:Boolean>

        <!--help document styles-->
        <Style TargetType="{x:Type FlowDocumentReader}">
            <Setter Property="ViewingMode" Value="Scroll" />
        </Style>

        <Style x:Key="Center" TargetType="{x:Type Paragraph}">
            <Setter Property="TextAlignment" Value="Center" />
        </Style>

        <Style x:Key="ProgramName" TargetType="{x:Type Paragraph}" BasedOn="{StaticResource Center}">
            <Setter Property ="FontSize" Value="32" />
            <Setter Property ="FontStyle" Value="Italic" />
            <Setter Property ="LineHeight" Value="24" />
        </Style>

        <Style x:Key="Header" TargetType="{x:Type Paragraph}">
            <Setter Property ="FontSize" Value="20" />
            <Setter Property ="FontWeight" Value="Bold" />
            <Setter Property ="LineHeight" Value="16" />
        </Style>

        <Style x:Key="H2" TargetType="{x:Type Paragraph}">
            <Setter Property ="FontSize" Value="18" />
            <Setter Property ="FontWeight" Value="Bold" />
            <Setter Property ="LineHeight" Value="14" />
            <Setter Property ="Foreground" Value="Blue" />
        </Style>
        <Style x:Key="Info" TargetType="{x:Type Paragraph}">
            <Setter Property="Margin"  Value="20,0,0,12"/>
        </Style>
        <Style x:Key="InfoL" TargetType="{x:Type Paragraph}">
            <Setter Property="Margin"  Value="4,0,0,4"/>
            <Setter Property ="FontStyle" Value="Italic" />
        </Style>

        <Style x:Key="Fixed" TargetType="{x:Type Paragraph}">
            <Setter Property="Margin"  Value="20,0,0,12"/>
            <Setter Property ="FontStyle" Value="Italic" />
            <Setter Property="Foreground" Value="DarkRed" />
        </Style>

        <Style x:Key="Broken" TargetType="{x:Type Paragraph}">
            <Setter Property="Margin"  Value="20,0,0,12"/>
            <Setter Property ="FontStyle" Value="Italic" />
            <Setter Property="FontWeight" Value="Bold" />
            <Setter Property="Foreground" Value="Red" />
        </Style>


        <Style x:Key="HelpImageStyle" TargetType="Image">
            <Setter Property="Stretch" Value="None" />
            <Setter Property="Margin" Value="10,0,10,0" />
            <Setter Property="SnapsToDevicePixels" Value="True"/>
        </Style>

        <Style x:Key="DialogButtonStyle" TargetType="Button">
            <Setter Property="DockPanel.Dock" Value="Right" />
            <Setter Property="Height" Value="23" />
            <Setter Property="Width" Value="75" />
            <Setter Property="Margin" Value="4,0" />
        </Style>

        <!-- Define color of watermark in WatermarkTextBox name space -->
        <SolidColorBrush x:Key="brushWatermarkForeground" Color="#AA000033" />
        <SolidColorBrush x:Key="brushWatermarkBackground" Color="Transparent" />

        <Style TargetType="{x:Type ide:TextBoxWithWatermark}">
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=(Validation.Errors)[0].ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
            <Setter Property="SnapsToDevicePixels" Value="True"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ide:TextBoxWithWatermark}">
                        <ControlTemplate.Resources>
                            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />
                            <ide:WatermarkHelper x:Key="WatermarkHelper" />
                        </ControlTemplate.Resources>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>

                            <Label 
                                Content             ="{Binding Path=LabelTextBox, RelativeSource={RelativeSource FindAncestor, AncestorType=ide:TextBoxWithWatermark, AncestorLevel=1}}"
                                HorizontalAlignment ="Left"
                                VerticalAlignment   ="Bottom"
                                Grid.Column         ="0"
                                Grid.Row            ="0"
                                Foreground          ="CornflowerBlue"
                                />

                            <TextBox
                                    Name                ="txtUserEntry1"
                                    Text                ="{Binding Path=Text, RelativeSource={RelativeSource FindAncestor, AncestorType=ide:TextBoxWithWatermark, AncestorLevel=1}}"
                                    AcceptsReturn       ="{Binding Path=AcceptsReturn, RelativeSource={RelativeSource FindAncestor, AncestorType=ide:TextBoxWithWatermark, AncestorLevel=1}}"
                                    VerticalAlignment   ="{TemplateBinding VerticalAlignment}" 
                                    HorizontalAlignment ="{TemplateBinding HorizontalAlignment}"
                                    Grid.Column         ="0"
                                    Grid.Row            ="1" 
                                    AllowDrop           ="True"
                                />
                            <TextBlock
                                    Text                ="{Binding Path=Watermark, RelativeSource={RelativeSource FindAncestor, AncestorType=ide:TextBoxWithWatermark, AncestorLevel=1}}"
                                    Foreground          ="{StaticResource brushWatermarkForeground}"
                                    Background          ="{StaticResource brushWatermarkBackground}"
                                    IsHitTestVisible    ="False"
                                    VerticalAlignment   ="{TemplateBinding VerticalAlignment}" 
                                    HorizontalAlignment ="{TemplateBinding HorizontalAlignment}"
                                    Grid.Column         ="0" 
                                    Grid.Row            ="1"
                                    Margin              ="5,2"
                                >
                                <TextBlock.Visibility>
                                    <Binding ElementName="txtUserEntry1" Path="Text.IsEmpty" Converter="{StaticResource BooleanToVisibilityConverter}" />
                                </TextBlock.Visibility>
                            </TextBlock>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--Styles-->
            <Style x:Key     ="ImageEnabled"        TargetType="Image">
            <Setter Property ="Width"               Value="16" />
            <Setter Property ="Height"              Value="16" />
            <Setter Property ="SnapsToDevicePixels" Value="True"/>
            <Setter Property ="Stretch"             Value="Uniform"/>
                <Style.Triggers>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="0.35" />
                    </Trigger>
                </Style.Triggers>
            </Style>

        <!-- Image in a tree view -->
        
        <Style x:Key     ="ImageTree"              TargetType="Image">
            <Setter Property ="Width"               Value="16" />
            <Setter Property ="Height"              Value="16" />
            <Setter Property ="SnapsToDevicePixels" Value="True"/>
            <Setter Property ="Stretch"             Value="Uniform"/>
            <Setter Property="Margin"               Value="3,1,3,1"/>
        </Style>

        <Style TargetType="{x:Type GridViewColumnHeader}" x:Key="GridCenterStyle">
            <Setter Property="HorizontalContentAlignment" Value="Center" />
        </Style>


        <Style TargetType="{x:Type ItemsControl}" x:Key="LogViewerStyle">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <ScrollViewer CanContentScroll="True">
                            <ItemsPresenter/>
                        </ScrollViewer>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

            <!--<Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel IsItemsHost="True"/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>-->
        </Style>

        <Style x:Key="InnerBorder" TargetType="{x:Type Border}">
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Margin" Value="4" />
            <Setter Property="BorderBrush" Value="#B4B0A8" />
        </Style>
        
        <Style x:Key="ToolBarButtonStyle" TargetType="Button">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Margin" Value="3,0" />
            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        </Style>

        <Style x:Key="MenuItemStyle" TargetType="MenuItem">
            <Setter Property="Margin" Value="3,0" />
            <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}" />
            <Setter Property="ToolTipService.ShowOnDisabled" Value="True" />
        </Style>


        <!--<SolidColorBrush x:Key="LightBrush" Color="Yellow" />
        <SolidColorBrush x:Key="SolidBorderBrush" Color="Black" />

        <Style x:Key="{x:Type ToolTip}" TargetType="ToolTip">
            <Setter Property="OverridesDefaultStyle" Value="true" />
            <Setter Property="HasDropShadow" Value="True" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToolTip">
                        <ed:Callout Name="Border"
                                Width="{TemplateBinding Width}"
                                Height="{TemplateBinding Height}"
                                MinWidth="100"
                                MinHeight="30"
                                Margin="0,0,0,50"
                                AnchorPoint="0,1.5"
                                Background="{StaticResource LightBrush}"
                                BorderBrush="{StaticResource SolidBorderBrush}"
                                BorderThickness="1"
                                CalloutStyle="RoundedRectangle"
                                Fill="#FFF4F4F5"
                                FontSize="14.667"
                                Stroke="Black">
                            <ContentPresenter Margin="4"
                                          HorizontalAlignment="Left"
                                          VerticalAlignment="Top" />
                        </ed:Callout>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>-->

        <!-- Error Template -->
        <DataTemplate DataType="{x:Type zCore:Error}">
            <Grid Grid.IsSharedSizeScope="True" ShowGridLines="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition SharedSizeGroup="Level"      Width="20" />
                    <ColumnDefinition SharedSizeGroup="Level"      Width="60"/>
                    <ColumnDefinition SharedSizeGroup="LineNumber" Width="50"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                <Image   Width="16" Height="16" SnapsToDevicePixels="True"  Source="{Binding Level, Converter={StaticResource ErrorLevelIconConverter}}" Grid.Column="0"/>
                <TextBlock Text="{Binding Level}"       Grid.Column="1" FontWeight="Bold"    Margin="5,1,5,2"/>
                <TextBlock Text="{Binding LineNumber}"  Grid.Column="2" FontWeight="Bold"    Margin="2,1,2,2" HorizontalAlignment="Center"/>
                <TextBlock Text="{Binding Description}" Grid.Column="3" TextWrapping="Wrap"  Margin="5,1,1,2"/>
            </Grid>
        </DataTemplate>

        <DataTemplate x:Key="CellCenteredTemplate">
            <TextBlock Text="{Binding}" ToolTip="{Binding}" HorizontalAlignment="Center" />
        </DataTemplate>

        <DataTemplate x:Key="CellWrappedTemplate">
            <TextBlock Text="{Binding}" ToolTip="{Binding}" TextWrapping="WrapWithOverflow" />
        </DataTemplate>

       
        <!--Converters--> 
        <views:NullToFalseBooleanConverter        x:Key="NullToFalseBooleanConverter" />
        <views:NullToHiddenVisibilityConverter    x:Key="NullToHiddenVisibilityConverter" />
        <views:ActiveDocumentConverter            x:Key="ActiveDocumentConverter"/>
        <xcad:BoolToVisibilityConverter           x:Key="BoolToVisibilityConverter"/>
        <views:ErrorLevelToIconFilenameConverter  x:Key="ErrorLevelIconConverter"/>
        <views:BoolWithParamToVisibilityConverter x:Key="BoolWithParamToVisibility"/>
        <views:NullTextDocumentConverter          x:Key="TextDocumentConverter"/>

        <!--Validation for all textboxes-->
        <Style TargetType="{x:Type TextBox}">
            <Setter Property="Validation.ErrorTemplate">
                <Setter.Value>
                    <ControlTemplate>
                        <DockPanel LastChildFill="True">
                            <TextBlock DockPanel.Dock="Right" Foreground="Orange"  FontSize="12pt" FontWeight="Bold">!</TextBlock>
                            <!--<Border BorderBrush="Red" BorderThickness="1">
                                <AdornedElementPlaceholder />
                            </Border>-->
                        </DockPanel>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Validation.HasError" Value="true">
                    <Setter Property="ToolTip" Value="{Binding RelativeSource={RelativeSource Self},  Path=(Validation.Errors)[0].ErrorContent}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- validation error template -->
        <ControlTemplate x:Key="TextBoxErrorTemplate">
            <DockPanel LastChildFill="True">
                <TextBlock DockPanel.Dock="Right"  Foreground="Orange" FontSize="12pt">!!!!</TextBlock>
                <Border BorderBrush="Red" BorderThickness="1">
                    <AdornedElementPlaceholder />
                </Border>
            </DockPanel>
        </ControlTemplate>

        
        
    </Application.Resources>
</Application>

